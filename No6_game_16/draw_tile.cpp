/*******************************************************************************
* タイトル:		タイルの描画
* プログラム名:	draw_tile.cpp
* 作成者:		GP11B132 16 竹内大翔
* 作成日:		2022/06/10
*******************************************************************************/

/*******************************************************************************
* scanf のwarning防止
*******************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "draw_tile.h"
#include "main.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/

short g_map[DISP_H][DISP_W];//画面に何を表示するかを決める数字を入れる
char g_map_char[DISP_H][DISP_W];//上で決めた数字に当てはまるテキストを入れておく
//                          0    1    2    3    4    5    6    7   8
char g_tile_mark[][10] = { "  ","□","■","→","--","◆","◇","▲"," │"};//g_map_charの中に入れる文字を入れておく
OBJ test;
/*******************************************************************************
* 関数
*******************************************************************************/

/*******************************************************************************
* void plus_map(OBJ obj)
* 構造体OBJのPositionにtileを入れる
*******************************************************************************/
void plus_map(OBJ obj) {
	for (int i = 0; i < TILE_SIZE; i++) {
		for (int j = 0; j < TILE_SIZE; j++) {
			if (obj.tile[i][j] != 0) {
				g_map[i + obj.Position.y][j + obj.Position.x] = obj.tile[i][j];
			}
		}
	}
}
/*******************************************************************************
* void minus_map(short maptip,OBJ obj)
* OBjのold_Positionの場所をmaptipで指定した値にする
*******************************************************************************/
void minus_map(short maptip,OBJ obj) {

	for (int i = 0; i < TILE_SIZE; i++) {
		for (int j = 0; j < TILE_SIZE; j++) {
			g_map[i + obj.old_Position.y][j + obj.old_Position.x] = maptip;
		}
	}
}

/*******************************************************************************
* void ResetMap()
* 0で埋める
* 表示されるtileを全て消す
*******************************************************************************/
void ResetMap() {
	for (int i = 0; i <= DISP_H; i++) {
		for (int j = 0; j < DISP_W / 2; j++) {//DISP_Wは半角の文字数だから全角の数にするために割る２
			g_map[i][j] = 0;
		}
	}
}

/*******************************************************************************
* void draw_tile_Init(void)
* draw_tileの初期化
* g_mapを０で埋める
*******************************************************************************/
void draw_tile_Init(void) {
	for (int i = 0; i <= DISP_H;i++) {
		for (int j = 0; j < DISP_W/2; j++) {//DISP_Wは半角の文字数だから全角の数にするために割る２
			if (i == 0) {//二行目にスコア表示欄とゲーム画面を分けるための線の描画
				g_map[i][j] = 1;
			}
			else if (j == GAME_OVER) {//ゲームオーバーラインの描画
				g_map[i][j] = 8;
			}
			else {  //0で埋める
				g_map[i][j] = 0;
			}
		}
	}
}

/*******************************************************************************
* void draw_tile_Uninit(void)
* draw_tileの終了処理
* 特になし
*******************************************************************************/
void draw_tile_Uninit(void) {
}
/*******************************************************************************
* void draw_tile_Update(void)
* draw_tileの更新
* g_mapの中をg_tile_markに基づいてg_map_charを更新する
*******************************************************************************/
void draw_tile_Update(void) {
	for (int i = 0; i <= DISP_H; i++) {
		for (int j = 0; j < DISP_W / 2; j++) { 
			if (i == 0) {//二行目にスコア表示欄とゲーム画面を分けるための線の描画
				g_map[i][j] = 1;
			}
			else if (j == GAME_OVER) {//ゲームオーバーラインの描画
				g_map[i][j] = 8;
			} 
		}
	}
	for (int i = 0; i < DISP_H; i++) {
		for (int j = 0; j < DISP_W / 2; j++) {
			strcpy(&g_map_char[i][j * 2], g_tile_mark[g_map[i][j]]);
		}
	}
}
/*******************************************************************************
* void draw_tile_Draw(void)
* draw_tileの描画処理
* g_map_charの値によって色々表示する。表示は全角or半角2文字
*******************************************************************************/
void draw_tile_Draw(void) {
	system("cls");
	if (GetMode() == GAME_RESULT) {
		printf("終了する：ESC　　もう一回プレイする：ENTER");
	}
	else {
		printf("SCORE:%d", GetScore());
	}
	printf("\n%s", &g_map_char);
	
}


/*******************************************************************************
* short GetMap_Position(POSITION Position)
*戻り地　short 
*引数　　POSITION 
* マップのどこに何があるか
* g_mapの中の値をPositionごとに調べて戻す
*******************************************************************************/
short GetMap_Position(POSITION Position) {
	return g_map[Position.y][Position.x];
}

