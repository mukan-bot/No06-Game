/*******************************************************************************
* タイトル:		ゲームマネージャー
* プログラム名:	GM.cpp
* 作成者:		GP11B132 16 竹内大翔
* 作成日:		2022/06/10
*******************************************************************************/

/*******************************************************************************
* scanf のwarning防止
*******************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "GM.h"
#include "player.h"
#include "enemy.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/
int g_Mode = GAME_TITLE;		// 現在動作している状態（ゲームモード）
int g_Score = 0;                //スコアを入れておく
char g_enemy_ud = 'u';          //エネミーが上に動くか下に動くかを保存しておく

/*******************************************************************************
* int GetMode(void) / void SetMode(int mode)
* ゲームモードの参照と変更
* 
*******************************************************************************/
/*******************************************************************************
 関数名:	int GetMode(void)
 引数　:	void
 戻り値:	g_Mode
 説明　:	ゲームモードの参照
*******************************************************************************/
int GetMode(void) {
	return g_Mode;
}
/*******************************************************************************
 関数名:	void SetMode(int)
 引数　:	int型で変更先のゲームモード
 戻り値:	void
 説明　:	ゲームモードの変更
*******************************************************************************/
void SetMode(int mode) {
	switch (mode)
	{
	case GAME_MODE:
		enemy_Init(); //一秒ずつエネミーを動かすための処理のためここで初期化を入れる
		break;
	default:
		break;
	}
	g_Mode = mode;
}

/*******************************************************************************
* int GetScore(void) / void SetScore(int mode)
* スコアの参照と変更
*
*******************************************************************************/
/*******************************************************************************
 関数名:	int GetScore(void)
 引数　:	void
 戻り値:	g_Score
 説明　:	スコアの参照
*******************************************************************************/
int GetScore(void) {
	return g_Score;
}
/*******************************************************************************
 関数名:	void SetMode(int)
 引数　:	変更の仕方、score
 戻り値:	void
 説明　:	スコアの変更
*******************************************************************************/
void SetScore(short mode, int Score){
	if (SCORE_PLUS == mode) {
		g_Score += Score;
	}
	else if (SCORE_MINUS == mode) {
		g_Score -= Score;
	}
	else {
		g_Score = 0;
	}
}

/*******************************************************************************
* int GetEnemy_ud(void) / void GetEnemy_ud(char)
* ゲームモードの参照と変更
*
*******************************************************************************/
/*******************************************************************************
 関数名:	char GetEnemy_ud(void)
 引数　:	void
 戻り値:	g_enemy
 説明　:	エネミーの上下の参照
*******************************************************************************/
char GetEnemy_ud(void) {
	return g_enemy_ud;
}
/*******************************************************************************
 関数名:	void GetEnemy_ud(char enemy)
 引数　:	int型で変更先のゲームモード
 戻り値:	void
 説明　:	エネミーの上下の変更
*******************************************************************************/
void SetEnemy_ud(char enemy) {
	g_enemy_ud = enemy;
}



/*******************************************************************************
 関数名:	void GM_Update(void)
 引数　:	void
 戻り値:	void
 説明　:	エネミーとプレイヤーの監視
*******************************************************************************/
void GM_Update(void) {
	short* enemy1 = GetEnemy1();
	short* enemy2 = GetEnemy2();
	short* enemy3 = GetEnemy3();

	int j = 0;
	for (int i = 0; i < ENEMY_MAX; i++) {
		if ((enemy1[i] == 3) || (enemy2[i] == 3) || (enemy3[i] == 3)) {//エネミーのどれかがゲームオーバーラインのところまで進んだらRESULTへ
			SetMode(GAME_RESULT);
		}
		//jにエネミーのtfの値を足していって０なら全て０だからループの後でRESULTへ
		j += enemy1[i];
		j += enemy2[i];
		j += enemy3[i];

	}
	if (j == 0) {
		SetMode(GAME_RESULT);
	}
}
