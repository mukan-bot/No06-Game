/*******************************************************************************
* タイトル:		リザルト
* プログラム名:	player.cpp
* 作成者:		GP11B132 16 竹内大翔
* 作成日:		2022/06/28
*******************************************************************************/

/*******************************************************************************
* scanf のwarning防止
*******************************************************************************/
#define _CRT_SECURE_NO_WARNINGS

/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "result.h"
#include "draw_tile.h"
#include "bullet.h"
/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/
OBJ g_number[10];
OBJ g_score_text[4];
short g_number_tile[10][TILE_SIZE][TILE_SIZE] = {
	//0
	{
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,0,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
	},
	//1
	{
		{0,0,2,0,0,},
		{0,0,2,0,0,},
		{0,0,2,0,0,},
		{0,0,2,0,0,},
		{0,0,2,0,0,},
	},
	//2
	{
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{2,2,2,0,0,},
		{2,0,0,0,0,},
		{2,2,2,0,0,},
	},
	//3
	{
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{2,2,2,0,0,},
	},
	//4
	{
		{2,0,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{0,0,2,0,0,},
	},
	//5
	{
		{2,2,2,0,0,},
		{2,0,0,0,0,},
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{2,2,2,0,0,},
	},
	//6
	{
		{2,2,2,0,0,},
		{2,0,0,0,0,},
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
	},
	//7
	{
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,0,2,0,0,},
		{0,0,2,0,0,},
		{0,0,2,0,0,},
	},
	//8
	{
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
	},
	//9
	{
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,2,2,0,0,},
		{0,0,2,0,0,},
		{2,2,2,0,0,},
	},
};

short text[5][TILE_SIZE][TILE_SIZE]{
	//S
	{
		{2,2,2,2,0,},
		{2,0,0,0,0,},
		{0,2,2,0,0,},
		{0,0,0,2,0,},
		{2,2,2,2,0,},
	},
	//C
	{
		{2,2,2,2,0,},
		{2,0,0,2,0,},
		{2,0,0,0,0,},
		{2,0,0,2,0,},
		{2,2,2,2,0,},
	},
	//O
	{
		{2,2,2,2,0,},
		{2,0,0,2,0,},
		{2,0,0,2,0,},
		{2,0,0,2,0,},
		{2,2,2,2,0,},
	},
	//R
	{
		{2,2,2,0,0,},
		{2,0,0,2,0,},
		{2,2,2,0,0,},
		{2,0,2,0,0,},
		{2,0,0,2,0,},
	},
	//E
	{
		{2,2,2,2,0,},
		{2,0,0,0,0,},
		{2,2,2,2,0,},
		{2,0,0,0,0,},
		{2,2,2,2,0,},
	},
};


/*******************************************************************************
* void result_Init(void)
* result_Initの初期化
* g_number.tileにg_numer_tileをコピー
*******************************************************************************/
void result_Init(void) {
	for (int no = 0; no < 5; no++) {//文字数
		for (int i = 0; i < TILE_SIZE; i++) {
			for (int j = 0; j < TILE_SIZE; j++) {
				g_score_text[no].tile[i][j] = text[no][i][j];
			}
		}
		g_number[no].Position.x = 5;
		g_number[no].Position.y = 4;
	}
	for (int no = 0; no < 10; no++) {//0〜９まで１０回ループ
		for (int i = 0; i < TILE_SIZE; i++) {
			for (int j = 0; j < TILE_SIZE; j++) {
				g_number[no].tile[i][j] = g_number_tile[no][i][j];
			}
		}
		g_number[no].Position.x = 32;
		g_number[no].Position.y = 12;
	}
	ResetMap();
	//スコアの表示
	int score = GetScore();
	for (int no = 0; no < 4; no++) {//おそらく4桁の点数が最大だから四回ループ
		int temp = score % 10;
		score /= 10;
		plus_map(g_number[temp]);
		for (int i = 0; i < 10; i++) {
			g_number[i].Position.x -= 5;//文字の幅と間の距離
		}
	}
	for (int no = 0; no < 10; no++) {
		g_number[no].Position.x = 32;
	}
	//SCORE（文字）の表示
	for (int no = 0; no < 5; no++) {//5文字文ループ
		plus_map(g_score_text[no]);
		for (int i = 0; i < 5; i++) {
			g_score_text[i].Position.x += 6;//文字の幅と間の距離
		}
	}
	for (int no = 0; no < 5; no++) {
		g_score_text[no].Position.x = 6;
	}

}
void result_Uninit(void) {
}

void result_Update(void) {


	if (_kbhit() == 0) { // Key入力がない？
	// Key入力がないからここでリターンする
		Sleep(1);
		return;
	}
	int key = _getch();
	switch (key)
	{
	case(27):
		SetMode(GAME_END);
		break;
	case(13):
		SetMode(GAME_TITLE);
		ResetMap();
		SetScore(SCORE_ZERO, 0);
		bullet_set(2);
		break;
	default:
		//ResetMap();
		break;
	}
}
void result_Draw(void) {
}
